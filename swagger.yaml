swagger: "2.0"
info:
  version: tb-pipeline-dev-0-001
  title: "White Label API"
  description: User API spec for the white label project.
  contact:
    name: TravelBytes Team
    email: info@travelbytes.biz
    url: http://travelbytes.biz
host: tb-pipeline-dev.appspot.com
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:

  # Security
  /api/login:
    post:
      tags:
        - security
      summary: Logs in a currently registered user
      operationId: login
      parameters:
        - name: loginBody
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/UserDetail"
        401:
          description: Unauthorised/Invalid/Disabled/Locked out user
          schema:
            $ref: "#/definitions/MessageResponse"
        404:
          description: Missing required field
          schema:
            $ref: "#/definitions/MessageResponse"
  /api/logout:
    get:
      tags:
        - security
      summary: Logs out the currently registered user
      operationId: logout
      responses:
        200:
          description: Logout successful
  /api/user/register:
    post:
      tags:
        - security
      summary: Registers a new user
      operationId: registerUser
      parameters:
        - name: registerBody
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - captcha
            properties:
              email:
                type: string
                format: email
              captcha:
                description: Captcha response (not too sure what's the payload yet placeholder for now)
                type: string
              givenName:
                description: User's given name entry
                type: string
              surname:
                description: User's surname entry
                type: string
              mobile_api_key:
                description: (DEV only) overrides captcha requirements
                type: string
      responses:
        200:
          description: Registration successful and confirmation email sent
          schema:
            $ref: "#/definitions/TokenResponse"
        400:
          description: Invalid email address entered
          schema:
            $ref: "#/definitions/MessageResponse"
  /api/user/confirm:
    post:
      tags:
        - security
      summary: Confirms a new user or reset password request
      operationId: actionConfirm
      parameters:
        - name: confirmActionBody
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - pin
              - token
            properties:
              email:
                description: Email used in registration
                type: string
              pin:
                description: 6-digit one time PIN
                type: number
              token:
                description: Token session value
                type: string
              action:
                description: Action type for logging purposes
                type: string
      responses:
        200:
          description: Confirmation or password reset successful
          schema:
            $ref: "#/definitions/EmptyResponse"
        400:
          description: No user found for email
          schema:
            $ref: "#/definitions/MessageResponse"
        401:
          description: Expired token / Token and email mismatch / Token and PIN mismatch
          schema:
            $ref: "#/definitions/MessageResponse"
        404:
          description: Invalid user key
          schema:
            $ref: "#/definitions/MessageResponse"
  /api/user/resetpassword:
    post:
      tags:
        - security
      summary: Resets a user password
      operationId: resetPassword
      parameters:
        - name: resetPasswordBody
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - confirm_password
              - old_password
            properties:
              password:
                description: New password
                type: string
              confirm_password:
                description: New password confirmation
                type: string
              old_password:
                description: Previous password if changing in app
                type: string
      responses:
        200:
          description: Confirmation or password reset successful
          schema:
            $ref: "#/definitions/EmptyResponse"
        400:
          description: Passwords do not match / Previous password is invalid
          schema:
            $ref: "#/definitions/MessageResponse"
  /api/user/forgot:
    post:
      tags:
        - security
      summary: Forgotten password
      operationId: forgotPassword
      parameters:
        - name: forgotPasswordBody
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - captcha
            properties:
              email:
                description: User email address
                type: string
              captcha:
                description: Captcha response (not too sure what's the payload yet placeholder for now)
                type: string
              mobile_api_key:
                description: (DEV only) overrides captcha requirements
                type: string
      responses:
        200:
          description: Email with reset password instructions sent
          schema:
            $ref: "#/definitions/TokenResponse"
        400:
          description: Invalid user
          schema:
            $ref: "#/definitions/MessageResponse"
        401:
          description: User disabled
          schema:
            $ref: "#/definitions/MessageResponse"
  /api/user/detail:
    get:
      tags:
        - security
      summary: Get current user login details
      operationId: getUserDetail
      responses:
        200:
          description: Successfully retrieved user details
          schema:
            $ref: "#/definitions/UserDetail"
  /api/user/name/change:
    post:
      tags:
        - security
      summary: Change user name details
      operationId: changeUserName
      parameters:
        - name: userNameBody
          in: body
          required: true
          schema:
            type: object
            properties:
              givenName:
                description: User given name
                type: string
              surname:
                description: User surname
                type: string
      responses:
        200:
          description: Successfully updated user name deatails
          schema:
            $ref: "#/definitions/UserSettings"
        401:
          description: Invalid user / Not logged in
          schema:
            $ref: "#/definitions/MessageResponse"


  # Segment
  /api/segments/all:
    get:
      tags:
        - segment
      summary: Retrieve user travel segments
      description: |
        Returns a list of user trip segments ordered by date.
        Each list item properties are determined by segment type.
        The listed properties in the schema description are the properties 
        common to all segments.
        Note that properties beginning with '_' is for internal use and will be 
        removed in future.

      operationId: listSegments
      responses:
        200:
          description: Successfully retrieved user segments
          schema:
            $ref: "#/definitions/AllSegments"
        401:
          description: Unauthorised access / Login required
          schema:
            $ref: "#/definitions/MessageResponse"
            
            
  # Transform Component
  /transform/xml:
    post:
      tags:
        - transform
      summary: Transforms XML using XSLT
      operationId: xmlTransform
      produces:
        - application/json
        - text/xml
      parameters:
        - name: api_key
          in: query
          description: API key required for access
          required: true
          type: string
        - name: loginBody
          in: body
          required: true
          schema:
            type: object
            required:
              - xml
              - gds
            properties:
              xml:
                description: XML to transform
                type: string
              gds:
                description: GDS field to determine transform to apply [1A, 1G, 1S]
                type: string
      responses:
        200:
          description: Transform successful
          schema:
            type: object
            properties:
              tbxml:
                type: string
        400:
          description: Missing XML or GDS
          schema:
            $ref: "#/definitions/MessageResponse"
        401:
          description: Invalid or missing API key
          schema:
            $ref: "#/definitions/MessageResponse"
        404:
          description: Error in transforming XML
          schema:
            $ref: "#/definitions/MessageResponse"
  /transform/xml/message:
    post:
      tags:
        - transform
      summary: Subscriber handler for receiving incoming transform request messages
      description: Might be changed to use the admin /_ah/push-handler prefix if testing with it can be figured out
      operationId: messageTransformXml
      parameters:
        - name: api_key
          in: query
          description: API key required for access
          required: true
          type: string
        - name: subscription
          in: body
          schema:
            $ref: '#/definitions/PushMessage'
      responses:
        200:
          description: Transform successful
          schema:
            $ref: '#/definitions/EmptyResponse'
        250:
          description: Transformation error / Missing xml file
          schema:
            $ref: "#/definitions/MessageResponse"
        400:
          description: No record for id exists
          schema:
            $ref: "#/definitions/MessageResponse"


# Object Definitions
definitions:
  EmptyResponse:
    description: No data being returned
    type: object
  
  UserDetail:
    description: Logged in user account details
    type: object
    required:
     - givenName
     - surname
     - email
     - userKey
    properties:
      incomingEmail:
        description: User system unique email address
        type: string
        format: email
      givenName:
        description: User's given name
        type: string
      surname:
        description: User's surname
        type: string
      email:
        description: User login email
        type: string
        format: email
      userKey:
        description: User key id
        type: integer
      failedAttempts: 
        description: Number of prior failed attempts
        type: integer
      roles:
        description: List of roles assigned to the user
        type: array
        items: 
          type: string
      userSettings:
        $ref: "#/definitions/UserSettings"

  UserSettings:
    description: List of user settings
    type: array
    items:
      type: object
      properties:
        name:
          description: User setting name
          type: string
        value:
          description: User setting value
          type: string
    
  MessageResponse:
    type: object
    required:
     - code
     - message
    properties:
      code:
        description: Message code
        type: string
      message:
        description: Message description
        type: string
        
  TokenResponse:
    type: object
    required:
     - token
    properties:
      token:
        description: Token value used for authentication (string of numbers)
        type: string

  PushMessage:
    description: Push message sent to a subscriber
    type: object
    required:
      - subscription
      - message
    properties:
      subscripton:
        description: Full subscription string as on GCP
        type: string
      message:
        $ref: '#/definitions/PushSubMessage'
            
  PushSubMessage:
    description: Message payload published together during a PubSub. Either the data or attributes property must be populated
    type: object
    properties:
      data:
        description: Data sent in b64 encoded format
        type: string
      attributes: 
        description: Object consisting of key/value pairs, if data is empty, this must be populated
        type: object
      messageId:
        description: Id of the published message, this is autopopulated by the publisher server
        type: number
      publishTime:
        description: Time of published message, this is autopopulated by the publisher server
        type: string
        format: date-time
      force:
        description: Force reprocessing of xml transformation regardless of status
        type: boolean
        
  AllSegments:
    description: List of all user trip segments ordered by start date. 
    type: object
    properties:
      id:
        description: Database table primary key identifier
        type: string
      qitransaction_id:
        description: QiTransaction Id
        type: string
      agencyRef: 
        description: PNR / RLOC
        type: string
      bookingNames: 
        description: Comma separated list of Surname/GivenNames of passengers
        type: string
      statusCode:
        description: Status code of segment
        type: string
      status:
        description: Decoded status
        type: string
      startLocalDateTime:
        description: Starting time of segment in local time
        type: string
        format: date-time
      endLocalDateTime:
        description: Ending time of segment in local time
        type: string
        format: date-time
      startUtcDateTime:
        description: Starting time of segment in UTC time (Not available yet)
        type: string
        format: date-time
      endUtcDateTime:
        description: Ending time of segment in UTC time (Not available yet)
        type: string
        format: date-time
      startLocationId:
        description: Foreign key to location table for starting location (Not available yet)
        type: string
      endLocationId:
        description: Foreign key to location table for ending location (Not available yet)
        type: string
      created:
        description: When segment record was created
        type: string
        format: date-time
      updated:
        description: When segment record was last updated
        type: string
        format: date-time